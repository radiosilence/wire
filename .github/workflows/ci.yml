name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: "3.12"
  REDIS_VERSION: "7"

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip sync pyproject.toml
          uv pip install -e ".[dev]"
      
      - name: Run ruff
        run: |
          source .venv/bin/activate
          ruff check src/wire tests
      
      - name: Run black
        run: |
          source .venv/bin/activate
          black --check src/wire tests
      
      - name: Run mypy
        run: |
          source .venv/bin/activate
          mypy src/wire

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-uv-
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip sync pyproject.toml
          uv pip install -e ".[dev]"
      
      - name: Run tests
        env:
          WIRE_REDIS_HOST: localhost
          WIRE_REDIS_PORT: 6379
          WIRE_ENVIRONMENT: testing
          WIRE_SECRET_KEY: test-secret-key
        run: |
          source .venv/bin/activate
          pytest -v --cov=wire --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r src/wire -f json -o bandit-report.json
      
      - name: Upload bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Log in to GitHub Container Registry
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/wire
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Start Wire application
        run: |
          docker-compose up -d
          sleep 10
      
      - name: Run integration tests
        run: |
          pip install httpx pytest
          pytest tests/integration -v
      
      - name: Show logs on failure
        if: failure()
        run: docker-compose logs

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate deployment instructions
        run: |
          cat > deployment-instructions.md << EOF
          # Wire ${{ github.event.release.tag_name }} Deployment Instructions
          
          ## Docker Deployment
          
          1. Pull the latest image:
             \`\`\`bash
             docker pull ghcr.io/${{ github.repository }}:${{ github.event.release.tag_name }}
             \`\`\`
          
          2. Update your \`.env\` file with production settings
          
          3. Run with Docker Compose:
             \`\`\`bash
             docker-compose up -d
             \`\`\`
          
          ## Manual Deployment
          
          1. Install Python 3.12+ and Redis 7+
          
          2. Clone and install:
             \`\`\`bash
             git clone https://github.com/${{ github.repository }}.git
             cd wire
             uv venv
             source .venv/bin/activate
             uv pip sync pyproject.toml
             \`\`\`
          
          3. Configure environment variables in \`.env\`
          
          4. Initialize and run:
             \`\`\`bash
             wire init
             wire serve --workers 4
             \`\`\`
          
          ## Security Notes
          
          - Always use HTTPS in production
          - Generate a strong secret key: \`wire security generate-secret\`
          - Enable all security features in production
          - Regular Redis backups are essential
          EOF
      
      - name: Upload deployment instructions
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./deployment-instructions.md
          asset_name: deployment-instructions.md
          asset_content_type: text/markdown